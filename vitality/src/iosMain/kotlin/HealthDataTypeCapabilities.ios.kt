@file:Suppress("EXPECT_ACTUAL_CLASSIFIERS_ARE_IN_BETA_WARNING")

package vitality

/**
 * iOS implementation of health data type capability provider
 */
actual object HealthDataTypeCapabilityProvider {
    
    actual fun getCapabilities(dataType: HealthDataType): HealthDataTypeCapabilities {
        return when (dataType) {
            // Apple-generated metrics - read only
            HealthDataType.StandHours -> HealthDataTypeCapabilities(
                dataType = dataType,
                canRead = true,
                canWrite = false,
                platformNotes = "Generated by Apple Watch"
            )
            
            HealthDataType.WalkingAsymmetry -> HealthDataTypeCapabilities(
                dataType = dataType,
                canRead = true,
                canWrite = false,
                platformNotes = "Generated by iPhone/Apple Watch motion sensors"
            )
            
            HealthDataType.WalkingDoubleSupportPercentage,
            HealthDataType.WalkingSpeed,
            HealthDataType.WalkingStepLength,
            HealthDataType.StairAscentSpeed,
            HealthDataType.StairDescentSpeed,
            HealthDataType.SixMinuteWalkTestDistance -> HealthDataTypeCapabilities(
                dataType = dataType,
                canRead = true,
                canWrite = false,
                platformNotes = "Walking metrics generated by iOS"
            )
            
            // Blood pressure works but requires special handling on iOS
            HealthDataType.BloodPressure -> HealthDataTypeCapabilities(
                dataType = dataType,
                canRead = true,
                canWrite = true,
                platformNotes = "Handled as systolic/diastolic on iOS"
            )
            
            // Clinical records - always read-only
            HealthDataType.ClinicalAllergies,
            HealthDataType.ClinicalConditions,
            HealthDataType.ClinicalImmunizations,
            HealthDataType.ClinicalLabResults,
            HealthDataType.ClinicalMedications,
            HealthDataType.ClinicalProcedures,
            HealthDataType.ClinicalVitalSigns -> HealthDataTypeCapabilities(
                dataType = dataType,
                canRead = true,
                canWrite = false,
                platformNotes = "Clinical FHIR records are read-only"
            )
            
            // Device-generated metrics that might be read-only
            HealthDataType.RestingHeartRate,
            HealthDataType.HeartRateVariability -> HealthDataTypeCapabilities(
                dataType = dataType,
                canRead = true,
                canWrite = false,
                platformNotes = "Typically generated by Apple Watch"
            )
            
            HealthDataType.IrregularHeartRhythmEvent -> HealthDataTypeCapabilities(
                dataType = dataType,
                canRead = true,
                canWrite = false,
                platformNotes = "AFib notifications from Apple Watch"
            )
            
            HealthDataType.Electrocardiogram -> HealthDataTypeCapabilities(
                dataType = dataType,
                canRead = true,
                canWrite = false,
                platformNotes = "ECG recordings from Apple Watch"
            )
            
            HealthDataType.EnvironmentalAudioExposure,
            HealthDataType.HeadphoneAudioExposure -> HealthDataTypeCapabilities(
                dataType = dataType,
                canRead = true,
                canWrite = false,
                platformNotes = "Audio exposure metrics from iOS"
            )
            
            // Running metrics (iOS 16+)
            HealthDataType.RunningStrideLength,
            HealthDataType.RunningVerticalOscillation,
            HealthDataType.RunningGroundContactTime -> HealthDataTypeCapabilities(
                dataType = dataType,
                canRead = true,
                canWrite = false,
                platformNotes = "Running metrics from Apple Watch (iOS 16+)"
            )
            
            // Cycling metrics (iOS 17+)
            HealthDataType.CyclingCadence,
            HealthDataType.CyclingPower,
            HealthDataType.CyclingFunctionalThresholdPower -> HealthDataTypeCapabilities(
                dataType = dataType,
                canRead = true,
                canWrite = false,
                platformNotes = "Cycling metrics (iOS 17+)"
            )
            
            HealthDataType.VO2Max -> HealthDataTypeCapabilities(
                dataType = dataType,
                canRead = true,
                canWrite = false,
                platformNotes = "Calculated by Apple Watch during workouts"
            )
            
            // Most other types support both read and write
            else -> HealthDataTypeCapabilities(
                dataType = dataType,
                canRead = true,
                canWrite = true,
                platformNotes = null
            )
        }
    }
    
    actual fun getAllCapabilities(): List<HealthDataTypeCapabilities> {
        // Get all known health data types
        val allTypes = listOf(
            HealthDataType.Steps, HealthDataType.Distance, HealthDataType.Calories,
            HealthDataType.ActiveCalories, HealthDataType.BasalCalories, HealthDataType.Floors,
            HealthDataType.HeartRate, HealthDataType.HeartRateVariability, HealthDataType.RestingHeartRate,
            HealthDataType.BloodPressure, HealthDataType.OxygenSaturation, HealthDataType.RespiratoryRate,
            HealthDataType.BodyTemperature, HealthDataType.Weight, HealthDataType.Height,
            HealthDataType.BodyFat, HealthDataType.BMI, HealthDataType.LeanBodyMass,
            HealthDataType.Workout, HealthDataType.Sleep, HealthDataType.Water,
            HealthDataType.BloodGlucose, HealthDataType.VO2Max,
            HealthDataType.WalkingAsymmetry, HealthDataType.WalkingDoubleSupportPercentage,
            HealthDataType.WalkingSpeed, HealthDataType.WalkingStepLength,
            HealthDataType.StairAscentSpeed, HealthDataType.StairDescentSpeed,
            HealthDataType.SixMinuteWalkTestDistance, HealthDataType.StandHours,
            HealthDataType.NumberOfTimesFallen, HealthDataType.EnvironmentalAudioExposure,
            HealthDataType.HeadphoneAudioExposure, HealthDataType.UVExposure,
            HealthDataType.RunningStrideLength, HealthDataType.RunningVerticalOscillation,
            HealthDataType.RunningGroundContactTime, HealthDataType.CyclingCadence,
            HealthDataType.CyclingPower, HealthDataType.CyclingFunctionalThresholdPower,
            HealthDataType.SwimmingStrokeStyle, HealthDataType.Electrocardiogram,
            HealthDataType.IrregularHeartRhythmEvent, HealthDataType.PeripheralPerfusionIndex,
            HealthDataType.Mindfulness, HealthDataType.MenstruationFlow,
            HealthDataType.IntermenstrualBleeding, HealthDataType.CervicalMucus,
            HealthDataType.OvulationTest, HealthDataType.SexualActivity,
            HealthDataType.Protein, HealthDataType.Carbohydrates, HealthDataType.Fat,
            HealthDataType.Fiber, HealthDataType.Sugar, HealthDataType.Caffeine,
            HealthDataType.ClinicalAllergies, HealthDataType.ClinicalConditions,
            HealthDataType.ClinicalImmunizations, HealthDataType.ClinicalLabResults,
            HealthDataType.ClinicalMedications, HealthDataType.ClinicalProcedures,
            HealthDataType.ClinicalVitalSigns
        )
        return allTypes.map { getCapabilities(it) }
    }
    
    actual fun canRead(dataType: HealthDataType): Boolean {
        return getCapabilities(dataType).canRead
    }
    
    actual fun canWrite(dataType: HealthDataType): Boolean {
        return getCapabilities(dataType).canWrite
    }
}